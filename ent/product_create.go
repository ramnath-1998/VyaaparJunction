// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ramnath.1998/vyaaparjunction/ent/product"
	"github.com/ramnath.1998/vyaaparjunction/ent/productcategory"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetProductName sets the "productName" field.
func (pc *ProductCreate) SetProductName(s string) *ProductCreate {
	pc.mutation.SetProductName(s)
	return pc
}

// SetIdentifier sets the "Identifier" field.
func (pc *ProductCreate) SetIdentifier(u uuid.UUID) *ProductCreate {
	pc.mutation.SetIdentifier(u)
	return pc
}

// SetNillableIdentifier sets the "Identifier" field if the given value is not nil.
func (pc *ProductCreate) SetNillableIdentifier(u *uuid.UUID) *ProductCreate {
	if u != nil {
		pc.SetIdentifier(*u)
	}
	return pc
}

// SetCreatedOn sets the "createdOn" field.
func (pc *ProductCreate) SetCreatedOn(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedOn(t)
	return pc
}

// SetNillableCreatedOn sets the "createdOn" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedOn(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedOn(*t)
	}
	return pc
}

// SetCategoryId sets the "categoryId" field.
func (pc *ProductCreate) SetCategoryId(i int) *ProductCreate {
	pc.mutation.SetCategoryId(i)
	return pc
}

// SetCategoryID sets the "category" edge to the ProductCategory entity by ID.
func (pc *ProductCreate) SetCategoryID(id int) *ProductCreate {
	pc.mutation.SetCategoryID(id)
	return pc
}

// SetCategory sets the "category" edge to the ProductCategory entity.
func (pc *ProductCreate) SetCategory(p *ProductCategory) *ProductCreate {
	return pc.SetCategoryID(p.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.Identifier(); !ok {
		v := product.DefaultIdentifier()
		pc.mutation.SetIdentifier(v)
	}
	if _, ok := pc.mutation.CreatedOn(); !ok {
		v := product.DefaultCreatedOn()
		pc.mutation.SetCreatedOn(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.ProductName(); !ok {
		return &ValidationError{Name: "productName", err: errors.New(`ent: missing required field "Product.productName"`)}
	}
	if v, ok := pc.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "productName", err: fmt.Errorf(`ent: validator failed for field "Product.productName": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "Identifier", err: errors.New(`ent: missing required field "Product.Identifier"`)}
	}
	if _, ok := pc.mutation.CreatedOn(); !ok {
		return &ValidationError{Name: "createdOn", err: errors.New(`ent: missing required field "Product.createdOn"`)}
	}
	if _, ok := pc.mutation.CategoryId(); !ok {
		return &ValidationError{Name: "categoryId", err: errors.New(`ent: missing required field "Product.categoryId"`)}
	}
	if _, ok := pc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required edge "Product.category"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := pc.mutation.Identifier(); ok {
		_spec.SetField(product.FieldIdentifier, field.TypeUUID, value)
		_node.Identifier = value
	}
	if value, ok := pc.mutation.CreatedOn(); ok {
		_spec.SetField(product.FieldCreatedOn, field.TypeTime, value)
		_node.CreatedOn = value
	}
	if nodes := pc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.CategoryTable,
			Columns: []string{product.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	err      error
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
