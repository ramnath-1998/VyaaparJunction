// Code generated by ent, DO NOT EDIT.

package productcategory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the productcategory type in the database.
	Label = "product_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCategoryName holds the string denoting the categoryname field in the database.
	FieldCategoryName = "category_name"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldCreatedOn holds the string denoting the createdon field in the database.
	FieldCreatedOn = "created_on"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// Table holds the table name of the productcategory in the database.
	Table = "product_categories"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "products"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "category_id"
)

// Columns holds all SQL columns for productcategory fields.
var Columns = []string{
	FieldID,
	FieldCategoryName,
	FieldIdentifier,
	FieldCreatedOn,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CategoryNameValidator is a validator for the "categoryName" field. It is called by the builders before save.
	CategoryNameValidator func(string) error
	// DefaultIdentifier holds the default value on creation for the "identifier" field.
	DefaultIdentifier func() uuid.UUID
	// DefaultCreatedOn holds the default value on creation for the "createdOn" field.
	DefaultCreatedOn func() time.Time
)

// OrderOption defines the ordering options for the ProductCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCategoryName orders the results by the categoryName field.
func ByCategoryName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryName, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByCreatedOn orders the results by the createdOn field.
func ByCreatedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedOn, opts...).ToFunc()
}

// ByProductCount orders the results by product count.
func ByProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductStep(), opts...)
	}
}

// ByProduct orders the results by product terms.
func ByProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductTable, ProductColumn),
	)
}
