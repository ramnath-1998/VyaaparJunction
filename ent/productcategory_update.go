// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ramnath.1998/vyaaparjunction/ent/predicate"
	"github.com/ramnath.1998/vyaaparjunction/ent/product"
	"github.com/ramnath.1998/vyaaparjunction/ent/productcategory"
)

// ProductCategoryUpdate is the builder for updating ProductCategory entities.
type ProductCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// Where appends a list predicates to the ProductCategoryUpdate builder.
func (pcu *ProductCategoryUpdate) Where(ps ...predicate.ProductCategory) *ProductCategoryUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetCategoryName sets the "categoryName" field.
func (pcu *ProductCategoryUpdate) SetCategoryName(s string) *ProductCategoryUpdate {
	pcu.mutation.SetCategoryName(s)
	return pcu
}

// SetNillableCategoryName sets the "categoryName" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableCategoryName(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetCategoryName(*s)
	}
	return pcu
}

// SetIdentifier sets the "Identifier" field.
func (pcu *ProductCategoryUpdate) SetIdentifier(u uuid.UUID) *ProductCategoryUpdate {
	pcu.mutation.SetIdentifier(u)
	return pcu
}

// SetNillableIdentifier sets the "Identifier" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableIdentifier(u *uuid.UUID) *ProductCategoryUpdate {
	if u != nil {
		pcu.SetIdentifier(*u)
	}
	return pcu
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (pcu *ProductCategoryUpdate) AddProductIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.AddProductIDs(ids...)
	return pcu
}

// AddProduct adds the "product" edges to the Product entity.
func (pcu *ProductCategoryUpdate) AddProduct(p ...*Product) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddProductIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcu *ProductCategoryUpdate) Mutation() *ProductCategoryMutation {
	return pcu.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (pcu *ProductCategoryUpdate) ClearProduct() *ProductCategoryUpdate {
	pcu.mutation.ClearProduct()
	return pcu
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (pcu *ProductCategoryUpdate) RemoveProductIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.RemoveProductIDs(ids...)
	return pcu
}

// RemoveProduct removes "product" edges to Product entities.
func (pcu *ProductCategoryUpdate) RemoveProduct(p ...*Product) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProductCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProductCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProductCategoryUpdate) check() error {
	if v, ok := pcu.mutation.CategoryName(); ok {
		if err := productcategory.CategoryNameValidator(v); err != nil {
			return &ValidationError{Name: "categoryName", err: fmt.Errorf(`ent: validator failed for field "ProductCategory.categoryName": %w`, err)}
		}
	}
	return nil
}

func (pcu *ProductCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productcategory.Table, productcategory.Columns, sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.CategoryName(); ok {
		_spec.SetField(productcategory.FieldCategoryName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Identifier(); ok {
		_spec.SetField(productcategory.FieldIdentifier, field.TypeUUID, value)
	}
	if pcu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductTable,
			Columns: []string{productcategory.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedProductIDs(); len(nodes) > 0 && !pcu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductTable,
			Columns: []string{productcategory.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductTable,
			Columns: []string{productcategory.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// ProductCategoryUpdateOne is the builder for updating a single ProductCategory entity.
type ProductCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// SetCategoryName sets the "categoryName" field.
func (pcuo *ProductCategoryUpdateOne) SetCategoryName(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetCategoryName(s)
	return pcuo
}

// SetNillableCategoryName sets the "categoryName" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableCategoryName(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetCategoryName(*s)
	}
	return pcuo
}

// SetIdentifier sets the "Identifier" field.
func (pcuo *ProductCategoryUpdateOne) SetIdentifier(u uuid.UUID) *ProductCategoryUpdateOne {
	pcuo.mutation.SetIdentifier(u)
	return pcuo
}

// SetNillableIdentifier sets the "Identifier" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableIdentifier(u *uuid.UUID) *ProductCategoryUpdateOne {
	if u != nil {
		pcuo.SetIdentifier(*u)
	}
	return pcuo
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (pcuo *ProductCategoryUpdateOne) AddProductIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.AddProductIDs(ids...)
	return pcuo
}

// AddProduct adds the "product" edges to the Product entity.
func (pcuo *ProductCategoryUpdateOne) AddProduct(p ...*Product) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddProductIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcuo *ProductCategoryUpdateOne) Mutation() *ProductCategoryMutation {
	return pcuo.mutation
}

// ClearProduct clears all "product" edges to the Product entity.
func (pcuo *ProductCategoryUpdateOne) ClearProduct() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearProduct()
	return pcuo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (pcuo *ProductCategoryUpdateOne) RemoveProductIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.RemoveProductIDs(ids...)
	return pcuo
}

// RemoveProduct removes "product" edges to Product entities.
func (pcuo *ProductCategoryUpdateOne) RemoveProduct(p ...*Product) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the ProductCategoryUpdate builder.
func (pcuo *ProductCategoryUpdateOne) Where(ps ...predicate.ProductCategory) *ProductCategoryUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProductCategoryUpdateOne) Select(field string, fields ...string) *ProductCategoryUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) Save(ctx context.Context) (*ProductCategory, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) SaveX(ctx context.Context) *ProductCategory {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProductCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProductCategoryUpdateOne) check() error {
	if v, ok := pcuo.mutation.CategoryName(); ok {
		if err := productcategory.CategoryNameValidator(v); err != nil {
			return &ValidationError{Name: "categoryName", err: fmt.Errorf(`ent: validator failed for field "ProductCategory.categoryName": %w`, err)}
		}
	}
	return nil
}

func (pcuo *ProductCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ProductCategory, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productcategory.Table, productcategory.Columns, sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategory.FieldID)
		for _, f := range fields {
			if !productcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.CategoryName(); ok {
		_spec.SetField(productcategory.FieldCategoryName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Identifier(); ok {
		_spec.SetField(productcategory.FieldIdentifier, field.TypeUUID, value)
	}
	if pcuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductTable,
			Columns: []string{productcategory.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedProductIDs(); len(nodes) > 0 && !pcuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductTable,
			Columns: []string{productcategory.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.ProductTable,
			Columns: []string{productcategory.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductCategory{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
